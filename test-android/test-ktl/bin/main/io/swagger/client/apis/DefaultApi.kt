/**
 * Test Mock
 * 个人测试空间 Mock 专用
 *
 * OpenAPI spec version: last
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Empty_object
import io.swagger.client.models.InlineResponse200

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "/samuel_test") : ApiClient(basePath) {

    /**
     * test_mock_1_basic
     * 
     * @param param1 testing params 
     * @return InlineResponse200
     */
    @Suppress("UNCHECKED_CAST")
    fun mockGet(param1: kotlin.String): InlineResponse200 {
        val localVariableQuery: MultiValueMap = mapOf("param1" to listOf("$param1"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/mock", query = localVariableQuery
        )
        val response = request<InlineResponse200>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as InlineResponse200
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * test_mock_2_mockjs
     * 
     * @param param1  
     * @param param2  
     * @param body raw paramter (optional)
     * @return Empty_object
     */
    @Suppress("UNCHECKED_CAST")
    fun mockWithMockjsGet(param1: kotlin.String, param2: kotlin.String, body: Object? = null): Empty_object {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("param1" to listOf("$param1"), "param2" to listOf("$param2"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/mock/with/mockjs", query = localVariableQuery
        )
        val response = request<Empty_object>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Empty_object
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
